# 1. Convert datestamp column to a datetime object and Set the datestamp columns as the index of your DataFrame.
emp['datestamp']= pd.to_datetime(emp['datestamp'])

emp['index_date'] = emp['datestamp']
emp = emp.set_index('index_date')pl

# Check if there are missing values in each column.
emp.isna().sum()

extra: # 2. Generate a boxplot to find the distribution of unemployment rate for every industry.

emp1 = emp
emp1.drop(columns=emp1.columns[3], axis=1, inplace=True)
emp_melted = pd.melt(emp1)
emp_melted



import seaborn as sb
sb.boxplot(data=emp)


IMPORTANT:

# 3. Using line chart Visualize the unemployment rate of workers by industry.

sb.lineplot(data=emp)


from matplotlib import pyplot as plt
i = 0
for (columnName, columnData) in emp.iteritems():
    f = plt.figure()
    a = f.add_subplot(111)
    a.plot(emp[columnName])
    a.set_title(emp.columns[i])
    i += 1
    
    
    # 4.Plot the monthly and yearly trends.

emp['Month']= emp['datestamp'].dt.month
emp['Year']= emp['datestamp'].dt.year
industries=list(emp.columns)
emp[industries[1:-3]].plot(figsize=(11, 9), subplots=True)
plt.xlabel("Year")
plt.ylabel("Employment Rate")

fig,axs=plt.subplots(8,2,figsize=(20,30))
i=0
a=emp.columns
for z in range(0,8,1):
        for y in range(0,2,1):
            sb.lineplot(y=emp[a[i]],x=emp.index.month,ax=axs[z][y])
            i+=1
            
            # 5.Apply time series decomposition to your dataset to visualize the trend and seasonality.

import statsmodels.api as sm
series = [i+randrange(10) for i in range(1,50)]
result = seasonal_decompose(series, model='additive', period=1)
result.plot()
plt.show()

# 6.Visualize the seasonality of Agriculture, Health and Finance sector.

cols = ["Agriculture", "Education and Health", "Finance"]
indx = 0
for i in range(len(cols)):
    decomposition = sm.tsa.seasonal_decompose(emp[cols[indx]], model='Additive')
    decomposition.plot()
    indx += 1
    
    
    # 7.Visualize the seasonality of multiple time series and the correlation between each time series in the dataset.

results = []
i = 0
for (columnName, columnData) in emp.iteritems():
    f = plt.figure()
    a = f.add_subplot(111)
    res = sm.tsa.seasonal_decompose(emp[columnName], model='additive')
    a.set_title(emp.columns[i])
    res.seasonal.plot()
    plt.legend(loc="upper right")
    results.append(res.seasonal)
    i += 1
    
    sb.heatmap(emp.corr(), annot = True,cmap = 'Blues', linewidths =.4)
